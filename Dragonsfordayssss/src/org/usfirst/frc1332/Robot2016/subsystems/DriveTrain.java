// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1332.Robot2016.subsystems;

import org.usfirst.frc1332.Robot2016.RobotMap;
import org.usfirst.frc1332.Robot2016.commands.*;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.smartdashboard.*;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 *
 */
public class DriveTrain extends PIDSubsystem  {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController frontRight = RobotMap.driveTrainFrontRight;
    private final AnalogGyro gyro = RobotMap.driveTrainAnalogGyro1;
    private final SpeedController rearRight = RobotMap.driveTrainFrontLeft;
    private final SpeedController frontLeft = RobotMap.driveTrainFrontLeft;
    private final SpeedController rearLeft = RobotMap.driveTrainFrontLeft;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Initialize your subsystem here
    public DriveTrain () {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("PIDSubsystem1", 1.0, 0.0, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("PID Subsystem 1", "PIDSubsystem Controller", getPIDController());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
        enable();
    }
    public double getGyroAngle() { 
    	return gyro.getAngle();
    	
    }
    public void initDefaultCommand() {
    }
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    	double value = gyro.pidGet();
    	System.out.println("Pin: "  + value);
        return value;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
    	System.out.println("Pout: " + output);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        double setPoint = getPIDController().getSetpoint();
    	System.out.println("Set: " + setPoint);
    	
    	double leftS = setPoint;
    	double rightS = setPoint;
    	
    	leftS = leftS + output;
    	rightS = rightS - output;
    	
    	System.out.println("Left: " + leftS);
    	System.out.println("Right: " + rightS);
    	frontRight.pidWrite(rightS);
        rearRight.pidWrite(rightS);
    	frontLeft.pidWrite(leftS);
    	rearLeft.pidWrite(leftS);
    }
}
